geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[index]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[index]))
# ----------------
# vnBins = c(2, 3, 4, 5, 10, 100)
index <- 6 #of above
dfp <- dflist[[index]] %>% mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame()
ggplot(dfp, aes(x=initT, y=initP, color=pathL)) +
ggtitle(paste( "nBins = ", vnBins[index]))+
scale_color_continuous(limits=c(3,15))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[index]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[index]))
ggplot(dfp, aes(x=initT, y=initP, color=pathL)) +
ggtitle(paste( "nBins = ", vnBins[index]))+
scale_color_continuous(limits=c(3,15))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("results2_4x4_08-17-2025 07-13.csv", header=FALSE) %>%
mutate_at(c('V1','V2','V3','V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11','V12','V13'), as.numeric) %>%
rename(
sigF = V1,
sigM = V2,
optM = V3,
tMax = V4,
n = V5,
nLociT = V6,
nLociP = V7,
nBins = V8,
mutRt = V9,
condDens = V10,
rngSeed = V11, # swapped w conddens in next iter
initT = V12,
initP = V13,
corrIn = V14,
pathL = V15,
endT = V16,
endP = V17
)  %>%
mutate(
x0 = 0,
x1 = 1,
y0 = -(0.5*((sigF^2)/100)))   #(((sigF^2)/100) + 1)*0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1) - (0.5*((sigF^2)/100)))) %>%    #(((sigF^2)/100) + 1)*1 - (0.5*((sigF^2)/100))))
df <- read.csv("results2_4x4_08-17-2025 07-13.csv", header=FALSE) %>%
mutate_at(c('V1','V2','V3','V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11','V12','V13'), as.numeric) %>%
rename(
sigF = V1,
sigM = V2,
optM = V3,
tMax = V4,
n = V5,
nLociT = V6,
nLociP = V7,
nBins = V8,
mutRt = V9,
condDens = V10,
rngSeed = V11, # swapped w conddens in next iter
initT = V12,
initP = V13,
corrIn = V14,
pathL = V15,
endT = V16,
endP = V17
)  %>%
mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*0 - (0.5*((sigF^2)/100))),
df <- read.csv("results2_4x4_08-17-2025 07-13.csv", header=FALSE) %>%
mutate_at(c('V1','V2','V3','V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11','V12','V13'), as.numeric) %>%
rename(
sigF = V1,
sigM = V2,
optM = V3,
tMax = V4,
n = V5,
nLociT = V6,
nLociP = V7,
nBins = V8,
mutRt = V9,
condDens = V10,
rngSeed = V11, # swapped w conddens in next iter
initT = V12,
initP = V13,
corrIn = V14,
pathL = V15,
endT = V16,
endP = V17
)  %>%
mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*0 - (0.5*((sigF^2)/100)),
y1 = (((sigF^2)/100) + 1)*1 - (0.5*((sigF^2)/100))))
df <- read.csv("results2_4x4_08-17-2025 07-13.csv", header=FALSE) %>%
mutate_at(c('V1','V2','V3','V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11','V12','V13'), as.numeric) %>%
rename(
sigF = V1,
sigM = V2,
optM = V3,
tMax = V4,
n = V5,
nLociT = V6,
nLociP = V7,
nBins = V8,
mutRt = V9,
condDens = V10,
rngSeed = V11, # swapped w conddens in next iter
initT = V12,
initP = V13,
corrIn = V14,
pathL = V15,
endT = V16,
endP = V17
)  %>%
mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*0 - (0.5*((sigF^2)/100)),
y1 = (((sigF^2)/100) + 1)*1 - (0.5*((sigF^2)/100)))
as.data.frame()
df <- read.csv("results2_4x4_08-17-2025 07-13.csv", header=FALSE) %>%
mutate_at(c('V1','V2','V3','V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11','V12','V13'), as.numeric) %>%
rename(
sigF = V1,
sigM = V2,
optM = V3,
tMax = V4,
n = V5,
nLociT = V6,
nLociP = V7,
nBins = V8,
mutRt = V9,
condDens = V10,
rngSeed = V11, # swapped w conddens in next iter
initT = V12,
initP = V13,
corrIn = V14,
pathL = V15,
endT = V16,
endP = V17
)  %>%
mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*0 - (0.5*((sigF^2)/100)),
y1 = (((sigF^2)/100) + 1)*1 - (0.5*((sigF^2)/100))) %>%
as.data.frame()
vnBins = as.numeric(levels(as.factor(df$nBins))) #c(2, 3, 4, 5, 10, 100)
dflist <- list()
for (i in 1:length(vnBins)){
dflist[[i]] <- df %>% filter(nBins %in% vnBins[i])
}
for (i in 1:length(vnBins)){}
dfp <- dflist[[i]] %>% mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame()
ggplot(dfp, aes(x=initT, y=initP, color=pathL)) +
ggtitle(paste( "nBins = ", vnBins[i]))+
scale_color_continuous(limits=c(3,15))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))
}
for (i in 1:length(vnBins)){
dfp <- dflist[[i]] %>% mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame()
ggplot(dfp, aes(x=initT, y=initP, color=pathL)) +
ggtitle(paste( "nBins = ", vnBins[i]))+
scale_color_continuous(limits=c(3,15))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))
}
plotlist <- list()
for (i in 1:length(vnBins)){
dfp <- dflist[[i]] %>% mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame()
plotlist[[i]] <-
ggplot(dfp, aes(x=initT, y=initP, color=pathL)) +
ggtitle(paste( "nBins = ", vnBins[i]))+
scale_color_continuous(limits=c(3,15))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))
}
plotlist[[1]]
plotlist <- list()
for (i in 1:length(vnBins)){
dfp <- dflist[[i]] %>% mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame()
plotlist[[i]] <-
ggplot(dfp, aes(x=initT, y=initP, color=pathL)) +
ggtitle(paste( "nBins = ", vnBins[i]))+
scale_color_continuous(limits=c(3,15))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))
print(plotlist[[i]])
}
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/delco/Documents/GitHub/OPumilio_Aim2_CodeSharing")
library(ggplot2)
library(dplyr)
library(plotly)
df <- read.csv("results2_4x4_08-17-2025 07-13.csv", header=FALSE) %>%
mutate_at(c('V1','V2','V3','V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11','V12','V13'), as.numeric) %>%
rename(
sigF = V1,
sigM = V2,
optM = V3,
tMax = V4,
n = V5,
nLociT = V6,
nLociP = V7,
nBins = V8,
mutRt = V9,
condDens = V10,
rngSeed = V11, # swapped w conddens in next iter
initT = V12,
initP = V13,
corrIn = V14,
pathL = V15,
endT = V16,
endP = V17
)  %>%
mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*0 - (0.5*((sigF^2)/100)),
y1 = (((sigF^2)/100) + 1)*1 - (0.5*((sigF^2)/100))) %>%
as.data.frame()
vnBins = as.numeric(levels(as.factor(df$nBins))) #c(2, 3, 4, 5, 10, 100)
dflist <- list()
for (i in 1:length(vnBins)){
dflist[[i]] <- df %>% filter(nBins %in% vnBins[i])
}
plotlist <- list()
for (i in 1:length(vnBins)){
dfp <- dflist[[i]] %>% mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame()
plotlist[[i]] <-
ggplot(dfp, aes(x=initT, y=initP, color=pathL)) +
ggtitle(paste( "nBins = ", vnBins[i]))+
scale_color_continuous(limits=c(3,15))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))
print(plotlist[[i]])
}
plotlist <- list()
colorlist <- c("gray","gray","gray","gray","gray","white")
for (i in 1:length(vnBins)){
dfp <- dflist[[i]] %>% mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame()
plotlist[[i]] <-
ggplot(dfp, aes(x=initT, y=initP, color=pathL)) +
ggtitle(paste( "nBins = ", vnBins[i]))+
scale_color_continuous(limits=c(3,15))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(dfp$mutRt), cols=vars(dfp$sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = colorlist[[i]], linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[i]))
print(plotlist[[i]])
}
df %>%
filter(mutRt == 0.001) %>%
mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame() %>%
ggplot(aes(x=initT, y=initP, color=pathL)) +
ggtitle("mutRt = 0; sigF vs nBins")+
scale_color_continuous(limits=c(3.5,7))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(mutRt), cols=vars(sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2))+ #
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[index]))+
scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[index]))
df %>%
filter(mutRt == 0.001) %>%
mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*(0 - (0.5*((sigF^2)/100))),
y1 = (((sigF^2)/100) + 1)*(1 - (0.5*((sigF^2)/100)))) %>%
as.data.frame() %>%
ggplot(aes(x=initT, y=initP, color=pathL)) +
ggtitle("mutRt = 0; sigF vs nBins")+
scale_color_continuous(limits=c(3.5,7))+
coord_cartesian(xlim= c(0, 1),ylim = c(0, 1), expand=FALSE) +
geom_segment(aes(x=x0, xend=x1, y = y0, yend = y1), color='gray')+
geom_point()+
geom_point(aes(x=endT,y=endP), shape=4)+
geom_segment(aes(xend=endT,yend=endP), linetype="dotted")+
facet_grid(rows=vars(mutRt), cols=vars(sigF))+ # , as.table = FALSE
theme_bw()+
theme(panel.spacing = unit(2, "lines"))+
# trick ggplot into using same num-scale on axes with major, while using minor for the bin lines:
# need to move minor lines slightly so not deleted when overlap with major (intended behavior)
# this is just less work now vs. making new data set to plot grid
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_line(color = "gray", linetype = 2)) #
#scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[1]))+
#scale_y_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), minor_breaks = seq(0.001,1.001, 1/vnBins[1]))
ggplot(df, aes(x=corrIn, color=as.factor(mutRt), fill=as.factor(mutRt))) +
geom_density(alpha=0.5)+
ylim(c(0,25))+
xlim(c(-0.5,0.5))+
facet_grid(rows=vars(nBins), cols=vars(sigF))
min(df$corrIn)
max(df$corrIn)
View(df)
mean(df$corrIn)
is.nan(df$corrIn)
any(is.nan(df$corrIn))
which(is.nan(df$corrIn))
df <- read.csv("results2_4x4_08-17-2025 07-13.csv", header=FALSE) %>%
mutate_at(c('V1','V2','V3','V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11','V12','V13'), as.numeric) %>%
rename(
sigF = V1,
sigM = V2,
optM = V3,
tMax = V4,
n = V5,
nLociT = V6,
nLociP = V7,
nBins = V8,
mutRt = V9,
condDens = V10,
rngSeed = V11, # swapped w conddens in next iter
initT = V12,
initP = V13,
corrIn = V14,
pathL = V15,
endT = V16,
endP = V17
)  %>%
mutate(
x0 = 0,
x1 = 1,
y0 = (((sigF^2)/100) + 1)*0 - (0.5*((sigF^2)/100)),
y1 = (((sigF^2)/100) + 1)*1 - (0.5*((sigF^2)/100))) %>%
as.data.frame()
vnBins = as.numeric(levels(as.factor(df$nBins))) #c(2, 3, 4, 5, 10, 100)
dflist <- list()
for (i in 1:length(vnBins)){
dflist[[i]] <- df %>% filter(nBins %in% vnBins[i])
}
View(df)
range(df$corrIn)
ggplot(df, aes(x=corrIn, color=as.factor(mutRt), fill=as.factor(mutRt))) +
geom_density(alpha=0.5)+
ylim(c(0,25))+
xlim(c(-0.5,0.5))+
facet_grid(rows=vars(nBins), cols=vars(sigF))
ggplot(df, aes(x=corrIn, color=as.factor(mutRt), fill=as.factor(mutRt))) +
geom_density(alpha=0.5)+
#ylim(c(0,25))+
xlim(c(-1,1))+
facet_grid(rows=vars(nBins), cols=vars(sigF))
which(df$mutRt == 0 & nBins == 100 & sigF == 0.1)
df %>% filter(mutRt == 0 & nBins == 100 & sigF == 0.1)
test <- df %>% filter(mutRt == 0 & nBins == 100 & sigF == 0.1)
View(test)
View(test)
range(test$corrIn)
hist(test$corrIn)
hist(test$corrIn, binwidth = 0.1)
?hist
hist(test$corrIn, breaks=seq(-1,1,0.1))
